{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"AAAA,OAAO,EAGL,SAAS,GACV,MAAM,iBAAiB,CAAC;AAIzB,MAAM,OAAO,YAAa,SAAQ,SAAS;IACzC;QACE,KAAK,CAAC;YACJ,IAAI,EAAE,WAAW;YACjB,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,kBAAkB;QACtB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,WAAW,CACT,SAA6B,EAC7B,YAA+B;QAE/B,MAAM,IAAI,KAAK,CAAC,0BAA0B,SAAS,GAAG,YAAY,EAAE,CAAC,CAAC;IACxE,CAAC;IACD,KAAK,CAAC,UAAU;QACd,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,KAAK,CAAC,eAAe;QACnB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,KAAK,CAAC,aAAa;QACjB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,KAAK,CAAC,SAAS;QACb,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,KAAK,CAAC,mBAAmB;QACvB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,KAAK,CAAC,iBAAiB;QACrB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,KAAK,CAAC,kBAAkB;QACtB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,KAAK,CAAC,qBAAqB;QACzB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,KAAK,CAAC,aAAa;QACjB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,KAAK,CAAC,oBAAoB;QACxB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,KAAK,CAAC,UAAU;QACd,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,KAAK,CAAC,kBAAkB;QACtB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;IACD,KAAK,CAAC,wBAAwB;QAC5B,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;IAC7C,CAAC;CACF","sourcesContent":["import {\n  ListenerCallback,\n  PluginListenerHandle,\n  WebPlugin,\n} from '@capacitor/core';\n\nimport type { AllowedResult, GoogleFitPlugin } from './definitions';\n\nexport class GoogleFitWeb extends WebPlugin implements GoogleFitPlugin {\n  constructor() {\n    super({\n      name: 'GoogleFit',\n      platforms: ['web'],\n    });\n  }\n\n  async connectToGoogleFit(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  addListener(\n    eventName: 'googleFitAllowed',\n    listenerFunc?: ListenerCallback,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle {\n    throw new Error(`Method not implemented.${eventName}${listenerFunc}`);\n  }\n  async disableFit(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  async logoutGoogleFit(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  async openGoogleFit(): Promise<void> {\n    throw new Error('Method not implemented.');\n  }\n  async isAllowed(): Promise<AllowedResult> {\n    throw new Error('Method not implemented.');\n  }\n  async isPermissionGranted(): Promise<AllowedResult> {\n    throw new Error('Method not implemented.');\n  }\n  async setWriteSleepData(): Promise<{ value: string }> {\n    throw new Error('Method not implemented.');\n  }\n  async writeStepCountData(): Promise<{ value: string }> {\n    throw new Error('Method not implemented.');\n  }\n  async writeSleepSegmentData(): Promise<{ value: string }> {\n    throw new Error('Method not implemented.');\n  }\n  async readSleepData(): Promise<any> {\n    throw new Error('Method not implemented.');\n  }\n  async isGoogleFitInstalled(): Promise<{ value: boolean }> {\n    throw new Error('Method not implemented.');\n  }\n  async getHistory(): Promise<any> {\n    throw new Error('Method not implemented.');\n  }\n  async getHistoryActivity(): Promise<any> {\n    throw new Error('Method not implemented.');\n  }\n  async getHistoryActivityPerDay(): Promise<any> {\n    throw new Error('Method not implemented.');\n  }\n}\n"]}